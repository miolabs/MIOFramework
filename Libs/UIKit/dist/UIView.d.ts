import { MIOObject, MIORect } from "../MIOFoundation";
import { UIWindow } from "./UIWindow";
import { UIGestureRecognizer, UIEvent } from ".";
/**
 * Created by godshadow on 11/3/16.
 */
export declare function UILayerSearchElementByAttribute(layer: any, key: any): any;
export declare function UILayerSearchElementByID(layer: any, elementID: any): any;
export declare function UILayerGetFirstElementWithTag(layer: any, tag: any): any;
export declare class UIView extends MIOObject {
    layerID: any;
    layer: any;
    layerOptions: any;
    alpha: number;
    tag: number;
    private _parent;
    parent: UIView;
    protected _viewIsVisible: boolean;
    protected _needDisplay: boolean;
    _isLayerInDOM: boolean;
    protected _subviews: any[];
    readonly subviews: any[];
    _window: UIWindow;
    _outlets: {};
    constructor(layerID?: any);
    init(): void;
    initWithFrame(frame: MIORect): void;
    initWithLayer(layer: any, owner: any, options?: any): void;
    copy(): any;
    awakeFromHTML(): void;
    setParent(view: UIView): void;
    addSubLayer(layer: any): void;
    _linkViewToSubview(view: any): void;
    addSubview(view: any, index?: any): void;
    insertSubviewAboveSubview(view: UIView, siblingSubview: UIView): void;
    private addLayerBeforeLayer;
    protected _addLayerToDOM(index?: any): void;
    removeFromSuperview(): void;
    protected _removeLayerFromDOM(): void;
    private _removeAllSubviews;
    setViewIsVisible(value: boolean): void;
    viewWithTag(tag: any): UIView;
    layoutSubviews(): void;
    setNeedsDisplay(): void;
    layerWithItemID(itemID: any): any;
    private _hidden;
    setHidden(hidden: boolean): void;
    hidden: boolean;
    setBackgroundColor(color: any): void;
    setBackgroundRGBColor(r: any, g: any, b: any, a?: any): void;
    getBackgroundColor(): string;
    setAlpha(alpha: any): void;
    private x;
    setX(x: any): void;
    getX(): number;
    private y;
    setY(y: any): void;
    getY(): number;
    private width;
    setWidth(w: any): void;
    getWidth(): number;
    private height;
    setHeight(height: any): void;
    getHeight(): number;
    setFrameComponents(x: any, y: any, w: any, h: any): void;
    setFrame(frame: any): void;
    readonly frame: any;
    readonly bounds: any;
    protected _getValueFromCSSProperty(property: any): string;
    protected _getIntValueFromCSSProperty(property: any): number;
    private _userInteraction;
    userInteraction: any;
    private isMouseDown;
    private mouseDownEvent;
    private mouseUpEvent;
    private mouseMoveEvent;
    touchesBeganWithEvent(touches: any, ev: UIEvent): void;
    touchesMovedWithEvent(touches: any, ev: UIEvent): void;
    touchesEndedWithEvent(touches: any, ev: UIEvent): void;
    private gestureRecognizers;
    addGestureRecognizer(gesture: UIGestureRecognizer): void;
    removeGestureRecognizer(gesture: UIGestureRecognizer): void;
    private static animationsChanges;
    private static animationsViews;
    private static animationTarget;
    private static animationCompletion;
    static animateWithDuration(duration: number, target: any, animations: any, completion?: any): void;
    private static addTrackingAnimationView;
    private static removeTrackingAnimationView;
    private static animationDidFinish;
}
