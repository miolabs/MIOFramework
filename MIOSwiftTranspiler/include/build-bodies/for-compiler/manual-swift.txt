----Swift.(file).Array.==infix(_:Array<Element>,_:Array<Element>)
let _this = this;
const lhsCount = lhs.count;
if((Int.$notEqual(lhsCount, rhs.count))) {
return false;
};
if((Int.$equal(lhsCount, 0))) {
return true;
};
{
let $idx$generator = _cloneStruct(Int.$halfOpenRange(0, lhsCount).makeIterator( {}));
while(true) {
const $ifLet0, idx_1;
if(!((($ifLet0 = $idx$generator.next( {$setThis: $val => $idx$generator = $val}))||true) && $ifLet0.rawValue == 'some' && ((idx_1 = $ifLet0[0])||true))) break
if(((_.arg0 = lhs.subscript$get(idx_1)).constructor.$notEqual(_.arg0, rhs.subscript$get(idx_1)))) {
return false;
};
}
};
return true
----Swift.(file).Array.append(contentsOf:S)
let _this = this;
{
let $el$generator = newElements.makeIterator( {});
while(true) {
const $ifLet0, el_1;
if(!((($ifLet0 = $el$generator.next( {$setThis: $val => $el$generator = $val}))||true) && $ifLet0.rawValue == 'some' && ((el_1 = $ifLet0[0])||true))) break
_this.append(el_1, {$setThis: $val => $info.$setThis(_this = _cloneStruct($val))});
}
}
----Swift.(file).Array.append(_:Element)
let _this = this;
_this.replaceSubrangeWith(Int.$halfOpenRange(_this.count, _this.count), _create(CollectionOfOne, 'init', newElement, {}), {$setThis: $val => $info.$setThis(_this = _cloneStruct($val))})
----Swift.(file).Array.replaceSubrange(_:Range<Int>,with:C)
let _this = this;
{
let $generator = _cloneStruct(subrange.makeIterator( {}));
while(true) {
const $ifLet0;
if(!((($ifLet0 = $generator.next( {$setThis: $val => $generator = $val}))||true) && $ifLet0.rawValue == 'some')) break
_this.removeAt(subrange.startIndex, {$setThis: $val => $info.$setThis(_this = _cloneStruct($val))});
}
};
let i = subrange.startIndex;
{
let $el$generator = newElements.makeIterator( {});
while(true) {
const $ifLet1, el_2;
if(!((($ifLet1 = $el$generator.next( {$setThis: $val => $el$generator = $val}))||true) && $ifLet1.rawValue == 'some' && ((el_2 = $ifLet1[0])||true))) break
_this.insertAt(el_2, i, {$setThis: $val => $info.$setThis(_this = _cloneStruct($val))});
Int.$addAndAssign({get: () => i, set: $val => i = $val}, 1);
}
}
----Swift.(file).Array.removeAll(keepingCapacity:Bool)
let _this = this;
_this.replaceSubrangeWith(_this.indices, _create(EmptyCollection, 'init', {}), {$setThis: $val => $info.$setThis(_this = _cloneStruct($val))})
----Swift.(file).Array.init(repeating:Element,count:Int)
let _this = this;
let result = _create(Array, 'init', {});
{
let $generator = _cloneStruct(Int.$halfOpenRange(0, count).makeIterator( {}));
while(true) {
const $ifLet0;
if(!((($ifLet0 = $generator.next( {$setThis: $val => $generator = $val}))||true) && $ifLet0.rawValue == 'some')) break
result.append(repeatedValue, {$setThis: $val => result = $val});
}
};
return result
----Swift.(file).BidirectionalCollection.joined(separator:String)
let _this = this;
let result = "";
if((separator.isEmpty)) {
{
let $x$generator = _this.makeIterator( {});
while(true) {
const $ifLet0, x_1;
if(!((($ifLet0 = $x$generator.next( {$setThis: $val => $x$generator = $val}))||true) && $ifLet0.rawValue == 'some' && ((x_1 = $ifLet0[0])||true))) break
result.append(_create(String, 'initString', x_1, {}), {$setThis: $val => result = $val});
}
};
return result;
};
let iter = _this.makeIterator( {});
const $ifLet2, first_3
if((($ifLet2 = iter.next( {$setThis: $val => iter = $val}))||true) && $ifLet2.rawValue == 'some' && ((first_3 = $ifLet2[0])||true)) {
result.append(_create(String, 'initString', first_3, {}), {$setThis: $val => result = $val});
while(true){
const $ifLet4, next_5
if(!((($ifLet4 = iter.next( {$setThis: $val => iter = $val}))||true) && $ifLet4.rawValue == 'some' && ((next_5 = $ifLet4[0])||true))) break
result.append(separator, {$setThis: $val => result = $val});
result.append(_create(String, 'initString', next_5, {}), {$setThis: $val => result = $val});
};
};
return result
----Swift.(file).Sequence.joined(separator:String)
let _this = this;
let result = "";
if((separator.isEmpty)) {
{
let $x$generator = _this.makeIterator( {});
while(true) {
const $ifLet0, x_1;
if(!((($ifLet0 = $x$generator.next( {$setThis: $val => $x$generator = $val}))||true) && $ifLet0.rawValue == 'some' && ((x_1 = $ifLet0[0])||true))) break
result.append(_create(String, 'initString', x_1, {}), {$setThis: $val => result = $val});
}
};
return result;
};
let iter = _this.makeIterator( {});
const $ifLet2, first_3
if((($ifLet2 = iter.next( {$setThis: $val => iter = $val}))||true) && $ifLet2.rawValue == 'some' && ((first_3 = $ifLet2[0])||true)) {
result.append(_create(String, 'initString', first_3, {}), {$setThis: $val => result = $val});
while(true){
const $ifLet4, next_5
if(!((($ifLet4 = iter.next( {$setThis: $val => iter = $val}))||true) && $ifLet4.rawValue == 'some' && ((next_5 = $ifLet4[0])||true))) break
result.append(separator, {$setThis: $val => result = $val});
result.append(_create(String, 'initString', next_5, {}), {$setThis: $val => result = $val});
};
};
return result
----Swift.(file)._ArrayProtocol.filter(_:(Self.Element) throws -> Bool)
let _this = this;
let result = _create(Array, 'init', {});
let iterator = _cloneStruct(_this.makeIterator( {}));
while(true){
const $ifLet0, _element_1
if(!((($ifLet0 = iterator.next( {$setThis: $val => iterator = $val}))||true) && $ifLet0.rawValue == 'some' && ((_element_1 = $ifLet0[0])||true))) break
if((isIncluded(_element_1))) {
result.append(_element_1, {$setThis: $val => result = $val});
};
};
return _create(Array, 'initBuffer', result, {})
----Swift.(file).Array.endIndex
let _this = this;
return _this.count;
}
get endIndex() { return this.endIndex$get()
----Swift.(file).Array.subscript(_:Range<Int>)#ASS

let _this = this;
_this.replaceSubrangeWith(bounds, rhs, {$setThis: $val => $info.$setThis(_this = _cloneStruct($val))})
----Swift.(file).Array.subscript(_:Range<Int>)
let _this = this;
let result = _create(Array, 'init', {});
{
let $index$generator = _cloneStruct(bounds.makeIterator( {}));
while(true) {
const $ifLet0, index_1;
if(!((($ifLet0 = $index$generator.next( {$setThis: $val => $index$generator = $val}))||true) && $ifLet0.rawValue == 'some' && ((index_1 = $ifLet0[0])||true))) break
result.append(_this.subscript$get(index_1), {$setThis: $val => result = $val});
}
};
return result;

----Swift.(file).IndexingIterator.init(_elements:Elements)
let _this = this;
_this._elements = _elements;
_this._position = _elements.startIndex;
return
----Swift.(file).StrideThrough.init(_start:Element,end:Element,stride:Element.Stride)

----Swift.(file).IndexingIterator.init(_elements:Elements,_position:Elements.Index)
let _this = this;
_this._elements = _elements;
_this._position = _position;
return
----Swift.(file).CollectionOfOne.Iterator.init(_elements:CollectionOfOne<Element>.Iterator.Element?)
let _this = this;
_this._elements = _elements;
return
----Swift.(file).Collection.map(_:(Self.Element) throws -> T)
let _this = this;
const n = _this.count;
if((Int.$equal(n, 0))) {
return _create(Array, 'initArrayLiteralArray', [], {});
};
let result = _create(Array, 'init', {});
let i = _this.startIndex;
{
let $generator = _cloneStruct(Int.$halfOpenRange(0, n).makeIterator( {}));
while(true) {
const $ifLet0;
if(!((($ifLet0 = $generator.next( {$setThis: $val => $generator = $val}))||true) && $ifLet0.rawValue == 'some')) break
result.append(transform(_this.subscript$get(i)), {$setThis: $val => result = $val});
_this.formIndexAfter({get: () => i, set: $val => i = $val});
}
};
return result
----Swift.(file).Sequence.map(_:(Self.Element) throws -> T)
let _this = this;
let result = _create(Array, 'init', {});
let iterator = _this.makeIterator( {});
while(true){
const $ifLet0, _element_1
if(!((($ifLet0 = iterator.next( {$setThis: $val => iterator = $val}))||true) && $ifLet0.rawValue == 'some' && ((_element_1 = $ifLet0[0])||true))) break
result.append(transform(_element_1), {$setThis: $val => result = $val});
};
return result
----Swift.(file).swap(_:T,_:T)
let a = a$inout.get()
let b = b$inout.get()
const $result = (() => {
let $tuple = {0: b, 1: a}
a = $tuple[0]
b = $tuple[1];})()
a$inout.set(a)
b$inout.set(b)
return $result
----Swift.(file).Sequence.sorted(by:(Self.Element, Self.Element) throws -> Bool)
let _this = this;
let result = _create(Array, 'initBuffer', _this, {});
result.sortBy(areInIncreasingOrder, {$setThis: $val => result = $val});
return result
----Swift.(file).Int.advanced(by:Int)
let _this = this;
return Int.$add(_this, n)
----Swift.(file).abs(_:T)
return (x.constructor.$lessThan(x, 0) ? x.constructor.$negate(x) : x)
----Swift.(file).Int.distance(to:Int)
let _this = this;
return Int.$subtract(other, _this)
----Swift.(file).Dictionary.filter(_:(Dictionary<Key, Value>.Element) throws -> Bool)
let _this = this;
let result = _create(Dictionary, 'init', {});
{
let $element$generator = _cloneStruct(_this.makeIterator( {}));
while(true) {
const $ifLet0, _element_1;
if(!((($ifLet0 = $element$generator.next( {$setThis: $val => $element$generator = $val}))||true) && $ifLet0.rawValue == 'some' && ((_element_1 = $ifLet0[0])||true))) break
if((isIncluded(_element_1))) {
result.subscript$set(_injectIntoOptional(_element_1["1"]), _element_1["0"], {$setThis: $val => result = $val});
};
}
};
return result
----Swift.(file).Array.init(_:S)
let _this = this;
let result = _create(Array, 'init', {});
let iterator = s.makeIterator( {});
while(true){
const $ifLet0, _element_1
if(!((($ifLet0 = iterator.next( {$setThis: $val => iterator = $val}))||true) && $ifLet0.rawValue == 'some' && ((_element_1 = $ifLet0[0])||true))) break
result.append(_element_1, {$setThis: $val => result = $val});
};
return result
----Swift.(file).Array.description
let _this = this;
let result = "";
String.$addAndAssign({get: () => result, set: $val => result = $val}, "[");
let first = true;
{
let $item$generator = _cloneStruct(_this.makeIterator( {}));
while(true) {
const $ifLet0, item_1;
if(!((($ifLet0 = $item$generator.next( {$setThis: $val => $item$generator = $val}))||true) && $ifLet0.rawValue == 'some' && ((item_1 = $ifLet0[0])||true))) break
if((first)) {
first = false;
}
else {
String.$addAndAssign({get: () => result, set: $val => result = $val}, ", ");
};
String.$addAndAssign({get: () => result, set: $val => result = $val}, (("") + (item_1) + ("")));
}
};
String.$addAndAssign({get: () => result, set: $val => result = $val}, "]");
return result;
}
get description() { return this.description$get()
----XCTest.(file).XCTAssert(_:() throws -> Bool,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => expression( {}), () => message( {}), null, null)
----XCTest.(file).XCTAssertFalse(_:() throws -> Bool,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => Bool.$not(expression( {})), () => message( {}), null, null)
----XCTest.(file).XCTAssertGreaterThan(_:() throws -> T,_:() throws -> T,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => (_.arg0 = expression1( {})).constructor.$greaterThan(_.arg0, expression2( {})), () => message( {}), null, null)
----XCTest.(file).XCTAssertGreaterThanOrEqual(_:() throws -> T,_:() throws -> T,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => (_.arg0 = expression1( {})).constructor.$greaterThanOrEqual(_.arg0, expression2( {})), () => message( {}), null, null)
----XCTest.(file).XCTAssertLessThan(_:() throws -> T,_:() throws -> T,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => (_.arg0 = expression1( {})).constructor.$lessThan(_.arg0, expression2( {})), () => message( {}), null, null)
----XCTest.(file).XCTAssertLessThanOrEqual(_:() throws -> T,_:() throws -> T,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => (_.arg0 = expression1( {})).constructor.$lessThanOrEqual(_.arg0, expression2( {})), () => message( {}), null, null)
----XCTest.(file).XCTAssertNil(_:() throws -> Any?,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => Optional.wrappedEqualsOptionalNilComparisonType(expression( {}), _injectIntoOptional(null)), () => message( {}), null, null)
----XCTest.(file).XCTAssertNotNil(_:() throws -> Any?,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => Optional.wrappedNotEqualsOptionalNilComparisonType(expression( {}), _injectIntoOptional(null)), () => message( {}), null, null)
----XCTest.(file).XCTAssertTrue(_:() throws -> Bool,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => Bool.$equal(expression( {}), true), () => message( {}), null, null)
----XCTest.(file).XCTAssertEqual(_:() throws -> T,_:() throws -> T,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => (_.arg0 = expression1( {})).constructor.$equal(_.arg0, expression2( {})), () => message( {}), null, null)
----XCTest.(file).XCTAssertNotEqual(_:() throws -> T,_:() throws -> T,_:() -> String,file:StaticString,line:UInt)
preconditionFileLine(() => (_.arg0 = expression1( {})).constructor.$notEqual(_.arg0, expression2( {})), () => message( {}), null, null)
----XCTest.(file).XCTFail(_:String,file:StaticString,line:UInt)
assertionFailureFileLine(() => message, null, null)
----Swift.(file).precondition(_:() -> Bool,_:() -> String,file:StaticString,line:UInt)
if((Bool.$not(condition( {})))) {
assertionFailureFileLine(() => message( {}), null, null);
}
----Swift.(file).assert(_:() -> Bool,_:() -> String,file:StaticString,line:UInt)
if((Bool.$not(condition( {})))) {
}
----Swift.(file).assertionFailure(_:() -> String,file:StaticString,line:UInt)
throw message( {})
----XCTest.(file).XCTest.setUp()

----XCTest.(file).XCTest.tearDown()

----Swift.(file)._OptionalNilComparisonType.init(nilLiteral:())

----XCTest.(file).XCTestCase.measure(_:() -> Void)

----ObjectiveC.(file).NSObject.init()

----closing dashes needed for the last definition to be processed